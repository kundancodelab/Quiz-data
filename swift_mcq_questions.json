[
  {
    "question": "Which keyword declares a constant in Swift?",
    "options": [
      "let",
      "var",
      "const",
      "static"
    ],
    "answer": "a",
    "explanation": "In Swift, 'let' declares a constant, meaning its value cannot be changed after assignment."
  },
  {
    "question": "What keyword is used to declare a variable that can change?",
    "options": [
      "const",
      "var",
      "let",
      "func"
    ],
    "answer": "b",
    "explanation": "'var' declares a variable in Swift, allowing its value to be modified."
  },
  {
    "question": "What does 'if let' primarily do in Swift?",
    "options": [
      "Unwraps an optional",
      "Creates a loop",
      "Defines a function",
      "Throws an error"
    ],
    "answer": "a",
    "explanation": "'if let' is used for optional binding, safely unwrapping an optional if it has a value."
  },
  {
    "question": "How is a function defined in Swift?",
    "options": [
      "func myFunc()",
      "function myFunc()",
      "def myFunc()",
      "let myFunc()"
    ],
    "answer": "a",
    "explanation": "Functions in Swift are defined with the 'func' keyword."
  },
  {
    "question": "What is the role of the 'guard' statement?",
    "options": [
      "Exits early if condition fails",
      "Loops through a collection",
      "Declares a constant",
      "Catches exceptions"
    ],
    "answer": "a",
    "explanation": "'guard' ensures a condition is met, exiting early if it fails."
  },
  {
    "question": "Which syntax correctly declares an array in Swift?",
    "options": [
      "let arr: [Int] = [1, 2, 3]",
      "let arr = Int[1, 2, 3]",
      "let arr: Array = [1, 2, 3]",
      "let arr[] = [1, 2, 3]"
    ],
    "answer": "a",
    "explanation": "Arrays in Swift use '[Type]' syntax for declaration."
  },
  {
    "question": "What feature in Swift handles the possibility of nil?",
    "options": [
      "Optionals",
      "Pointers",
      "Exceptions",
      "Default parameters"
    ],
    "answer": "a",
    "explanation": "Optionals allow variables to have a value or be nil, enhancing safety."
  },
  {
    "question": "How can you force unwrap an optional?",
    "options": [
      "Using !",
      "Using ?",
      "Using *",
      "Using &"
    ],
    "answer": "a",
    "explanation": "The '!' operator force unwraps an optional, but it crashes if nil."
  },
  {
    "question": "What does 'self' represent in a Swift class?",
    "options": [
      "The current instance",
      "A static method",
      "A global variable",
      "The superclass"
    ],
    "answer": "a",
    "explanation": "'self' refers to the current instance of a class, struct, or enum."
  },
  {
    "question": "Which access level allows use outside a module?",
    "options": [
      "public",
      "private",
      "internal",
      "fileprivate"
    ],
    "answer": "a",
    "explanation": "'public' makes a property or method accessible outside its module."
  },
  {
    "question": "What is a closure in Swift?",
    "options": [
      "A block of code",
      "A conditional statement",
      "A class instance",
      "An error type"
    ],
    "answer": "a",
    "explanation": "Closures are self-contained blocks of code that can capture variables."
  },
  {
    "question": "Which is a valid dictionary declaration in Swift?",
    "options": [
      "let dict: [String: Int] = [\"a\": 1]",
      "let dict = {String: Int}",
      "let dict = [String, Int]",
      "let dict: Dict = [\"a\", 1]"
    ],
    "answer": "a",
    "explanation": "Dictionaries use '[Key: Value]' syntax in Swift."
  },
  {
    "question": "What does 'mutating' allow in a struct?",
    "options": [
      "Modify its properties",
      "Prevent changes",
      "Create a loop",
      "Define a constant"
    ],
    "answer": "a",
    "explanation": "'mutating' lets a struct or enum method modify its own properties."
  },
  {
    "question": "Which operator provides a default for nil?",
    "options": [
      "??",
      "!",
      "?",
      "||"
    ],
    "answer": "a",
    "explanation": "The '??' nil-coalescing operator returns a default value if an optional is nil."
  },
  {
    "question": "What does 'inout' signify in a function parameter?",
    "options": [
      "Pass by reference",
      "Immutable parameter",
      "Optional parameter",
      "Return value"
    ],
    "answer": "a",
    "explanation": "'inout' allows a function to modify a parameter’s value outside its scope."
  },
  {
    "question": "How is an enum defined in Swift?",
    "options": [
      "enum Color { case red, blue }",
      "enum Color(red, blue)",
      "let enum Color = [red, blue]",
      "struct Color { red, blue }"
    ],
    "answer": "a",
    "explanation": "Enums use the 'enum' keyword with cases in Swift."
  },
  {
    "question": "What does 'lazy' mean for a property?",
    "options": [
      "Initialized on first access",
      "Always nil",
      "Cannot be changed",
      "Automatically updated"
    ],
    "answer": "a",
    "explanation": "'lazy' delays property initialization until it’s first used."
  },
  {
    "question": "Which protocol enables for-in loop iteration?",
    "options": [
      "Sequence",
      "Iterator",
      "Collection",
      "Codable"
    ],
    "answer": "a",
    "explanation": "'Sequence' allows types to be iterated over with a for-in loop."
  },
  {
    "question": "What is Swift’s default access level?",
    "options": [
      "internal",
      "public",
      "private",
      "open"
    ],
    "answer": "a",
    "explanation": "If unspecified, Swift defaults to 'internal' access within the module."
  },
  {
    "question": "How are errors handled in Swift?",
    "options": [
      "do-try-catch",
      "if-else",
      "guard-else",
      "switch-case"
    ],
    "answer": "a",
    "explanation": "'do-try-catch' is used for error handling with throwing functions."
  }
]
